#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('4quad:server');
var http = require('http').Server(app);
var io = require('socket.io')(http);
var mongodb = require("mongodb");

var MongoClient = mongodb.MongoClient;
var mongoURL = "mongodb://localhost:27017/4quad";

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

http.listen(port);
http.on('error', onError);
http.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = http.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Socket.IO Events
 */

io.on('connection', function (socket) {

  // join the service request room
  // this room is for all the pages that
  // need to know about service requests
  socket.on("joinSR", function(){
    socket.join("sr");
    // initial update
    sendServiceRequestsArray();
  });

  socket.on("joinDR", function(){
    socket.join("dr");
    // initial update
    sendDrinkRequestsArray();
  });

  // inserts a new service request in the DB and informs all pages in sr room
  socket.on('serviceRequest', function (msg) {
    createServiceRequest(msg, MongoClient, mongoURL);
  });

  // removes service a service request from the db and informs all pages in sr room
  socket.on('clearServiceRequest', function (msg) {
    deleteServiceRequest(msg, MongoClient, mongoURL);
  });

  socket.on('drinkRequest', function (msg) {
    createDrinkRequest(msg, MongoClient, mongoURL);
  });

  socket.on('clearDrinkRequest', function (msg) {
    deleteDrinkRequest(msg, MongoClient, mongoURL);
  });
});

/**
 * Socket.IO Events handler functions
 */

function createServiceRequest(msg, MongoClient, mongoURL){
  // trim whitespace
  let tblNumber = msg.trim();

  // insert into service_requests if not a duplicate request
  MongoClient.connect(mongoURL, function (err, db) {
    let query = { tableNum: tblNumber };
    let collection = db.collection("service_requests");

    // check for duplicate requests
    collection.find(query).toArray(function (err, results) {
      if (err)
        console.log(err);
      else if(results.length > 0)
        console.log("Duplicate Service Request for Table: " + tblNumber);
      else{
        // insert
        collection.insertOne(query, function (err, results) {
          if (err) 
            console.log(err);
          else
            console.log("Table # " + tblNumber + " - Service Request Inserted");
            // send the new array of tables with requests to the appropriate screens
            sendServiceRequestsArray();
        });
      };
    });
  }); 
};

function deleteServiceRequest(msg, MongoClient, mongoURL){
  // remove any extra whitespace
  let tblNumber = msg.trim();
  console.log('Clearing Service Request for Table: ' + tblNumber);
    
  MongoClient.connect(mongoURL, function (err, db) {
    // only return the table number from the query
    let query = { tableNum: tblNumber };
    let collection = db.collection("service_requests");

    collection.deleteMany(query, function (err, results) {
      if (err) 
        console.log(err);
      else
        console.log(results.result.n + " Document(s) Deleted");

      sendServiceRequestsArray();
    });
  });
};

// sends out the updated list of tables with service requests
function sendServiceRequestsArray(){
  MongoClient.connect(mongoURL, function (err, db) {
    let collection = db.collection("service_requests");

    collection.find({},{_id:0 , tableNum: 1}).toArray(function (err, results) {
      if (err)
        console.log(err);
      else{
        // send updated array to the pages to parse
        console.log("Sending Updated SR Array");
        console.log(results);
        io.to("sr").emit("srUpdate", results);
      };
    });

  });
};

// sends out the updated list of tables with drink requests
function sendDrinkRequestsArray(){
  MongoClient.connect(mongoURL, function (err, db) {
    let collection = db.collection("drink_requests");

    collection.find({},{_id:0 , tableNum: 1, drink: 1}).toArray(function (err, results) {
      if (err)
        console.log(err);
      else{
        // send updated array to the pages to parse
        console.log("Sending Updated DR Array");
        console.log(results);
        io.to("dr").emit("drUpdate", results);
      };
    });

  });
};


//{drink:"milk", tableNum: "1"}
function createDrinkRequest(msg, MongoClient, mongoURL){

  // insert into drink_requests
  MongoClient.connect(mongoURL, function (err, db) {
    let query = { tableNum: msg["tableNum"], drink: msg["drink"] };
    let collection = db.collection("drink_requests");

    collection.insertOne(query, function (err, results) {
      if (err) 
        console.log(err);
      else
        console.log("Table # " + msg["tableNum"] + " - Drink Request Inserted for: " + msg["drink"]);
        // send the new array of tables with requests to the appropriate screens
        sendDrinkRequestsArray();
    });
  }); 
};

function deleteDrinkRequest(msg, MongoClient, mongoURL){
  // remove any extra whitespace
  let tblNumber = msg.trim();
  console.log('Clearing Drink Request for Table: ' + tblNumber);
    
  MongoClient.connect(mongoURL, function (err, db) {
    // only return the table number from the query
    let query = { tableNum: tblNumber };
    let collection = db.collection("drink_requests");

    collection.deleteMany(query, function (err, results) {
      if (err) 
        console.log(err);
      else
        console.log(results.result.n + " Document(s) Deleted");

        sendDrinkRequestsArray();
    });
  });
};