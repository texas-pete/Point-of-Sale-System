#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('4quad:server');
var http = require('http').Server(app);
var io = require('socket.io')(http);
var mongodb = require("mongodb");

var MongoClient = mongodb.MongoClient;
var mongoURL = "mongodb://localhost:27017/4quad";

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

http.listen(port);
http.on('error', onError);
http.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = http.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Socket.IO Events
 */

io.on('connection', function (socket) {
  console.log('a user connected');

  socket.on('disconnect', function () {
    console.log('user disconnected');
  });

  // inserts a new service request in the DB
  socket.on('serviceRequest', function (msg) {
    createServiceRequest(msg, MongoClient, mongoURL);
  });

  // removes service a service request from the db
  socket.on('clearServiceRequest', function (msg) {
    deleteServiceRequest(msg, MongoClient, mongoURL);
  });

});

/**
 * Socket.IO Events handler functions
 */

function createServiceRequest(msg, MongoClient, mongoURL){
  // trim whitespace
  let tblNumber = msg.trim();
  console.log('Service Request from tbl ' + tblNumber);

  MongoClient.connect(mongoURL, function (err, db) {
    let query = { tableNum: tblNumber };
    let collection = db.collection("service_requests");

    collection.insertOne(query, function (err, results) {
      if (err) 
        console.log(err);
      else
        console.log(tblNumber + " Inserted");

      db.close();
    });
  });
};

function deleteServiceRequest(msg, MongoClient, mongoURL){
  // remove any extra whitespace
  let tblNumber = msg.trim();
  console.log('Clearing Service Request for tbl ' + tblNumber);
    
  MongoClient.connect(mongoURL, function (err, db) {
    // only return the table number from the query
    let query = { tableNum: tblNumber };
    let collection = db.collection("service_requests");

    collection.deleteMany(query, function (err, results) {
      if (err) 
        console.log(err);
      else
        console.log(results.result.n + " Document(s) Deleted");

      db.close();
    });
  });
};
